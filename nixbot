#!/usr/bin/env python3

import json

from flask import Flask, request, abort
from github3 import login
import github3

app = Flask(__name__)
gh = login('nixbot')

nicks = {
    'kragniz': [
        'README.md',
        'pkgs/games/hedgewars/*',
    ]
}

class Nixbot:
    def __init__(self, webhookdata):
        self.data = webhookdata

        self.message = self.get_comment_body()
        self.user = self.get_comment_user()

        repo_owner, repo, pr_number = self.get_origin()
        self.issue = gh.issue(repo_owner, repo, pr_number)
        self.pull_request = gh.pull_request(repo_owner, repo, pr_number)

        self.failed_files = []

    def get_comment_body(self):
        return self.data.get('comment').get('body')

    def get_comment_user(self):
        return self.data.get('comment').get('user').get('login')

    def get_origin(self):
        owner, repository = self.data.get('repository').get('full_name').split('/')
        n = self.data.get('issue').get('number')
        return owner, repository, n

    def check_authorized_for_file(self, user, filename):
        for path in nicks.get(user):
            if path.endswith('*'):
                if filename.startswith(path[:-1]):
                    return True
            else:
                if path == filename:
                    return True
        return False

    def check_authorized_for_pull_request(self):
        for file in self.pull_request.iter_files():
            if not self.check_authorized_for_file(self.user, file.filename):
                self.failed_files.append(file.filename)
        return len(self.failed_files) == 0

    def comment(self, message):
        self.issue.create_comment(message)

    def process(self):
        if self.user in nicks:
            if '@nixbot merge this please' in self.message:
                if self.check_authorized_for_pull_request():
                    self.comment('Okay @{}! (๑•͈ᴗ•͈)'.format(self.user))
                    self.pull_request.merge()
                    app.logger.info('Merged pull request {} by the request '
                                    'of {}'.format(self.issue,
                                                   self.user))
                else:
                    self.comment('''I'm sorry @{name}, I can't merge this for you! :( You're not allowed to change these files:

```
{files}
```'''.format(name=self.user,
              files='\n'.join(self.failed_files)))

@app.before_request
def limit_remote_addr():
    # whitelist github's ip
    if not request.remote_addr.startswith('192.30.252'):
        abort(403)

@app.route('/', methods=['GET', 'POST'])
def handler():
    if request.method == "POST":
        data = json.loads(request.data.decode('utf-8'))
        bot = Nixbot(data)
        bot.process()
        return 'yes'
    else:
        return 'no'

if __name__ == '__main__':
    app.run(port=9001, host='0.0.0.0', debug=True)
